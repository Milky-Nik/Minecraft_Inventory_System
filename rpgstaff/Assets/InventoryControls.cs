//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InventoryControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryControls"",
    ""maps"": [
        {
            ""name"": ""Inventory"",
            ""id"": ""0be3341a-24c7-443c-bbce-c28cb534448d"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""871a9393-69fc-4f5f-a290-a33f60b4d38b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LMB_DoubleTap"",
                    ""type"": ""Button"",
                    ""id"": ""39962d7f-a2cb-47e4-a5cb-bec43882a165"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LMB"",
                    ""type"": ""Button"",
                    ""id"": ""2c0be9cf-5454-4c84-8adf-cb201374471a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMB"",
                    ""type"": ""Button"",
                    ""id"": ""6d9ff190-421c-4973-9b66-28c1e5e1e725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""ba63672b-cff1-48bb-8caf-2ce50035cca3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""0fb97e3b-7bde-47f2-9aed-6560bf5e8e92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bea77c27-8345-4a7c-b55c-79cce627fb76"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c879f1ee-19ec-442a-b56f-b00096bcf6fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4e50e07-1f89-4665-a8b9-2da519d533de"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d569a4cf-44dd-4548-81b3-b84feaa87ccc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5423e14e-0b8b-415b-9d6f-ad1631df2b80"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cea725f9-30d4-4196-a87a-b6eb10289af1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB_DoubleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_MousePosition = m_Inventory.FindAction("MousePosition", throwIfNotFound: true);
        m_Inventory_LMB_DoubleTap = m_Inventory.FindAction("LMB_DoubleTap", throwIfNotFound: true);
        m_Inventory_LMB = m_Inventory.FindAction("LMB", throwIfNotFound: true);
        m_Inventory_RMB = m_Inventory.FindAction("RMB", throwIfNotFound: true);
        m_Inventory_Shift = m_Inventory.FindAction("Shift", throwIfNotFound: true);
        m_Inventory_Drop = m_Inventory.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_MousePosition;
    private readonly InputAction m_Inventory_LMB_DoubleTap;
    private readonly InputAction m_Inventory_LMB;
    private readonly InputAction m_Inventory_RMB;
    private readonly InputAction m_Inventory_Shift;
    private readonly InputAction m_Inventory_Drop;
    public struct InventoryActions
    {
        private @InventoryControls m_Wrapper;
        public InventoryActions(@InventoryControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Inventory_MousePosition;
        public InputAction @LMB_DoubleTap => m_Wrapper.m_Inventory_LMB_DoubleTap;
        public InputAction @LMB => m_Wrapper.m_Inventory_LMB;
        public InputAction @RMB => m_Wrapper.m_Inventory_RMB;
        public InputAction @Shift => m_Wrapper.m_Inventory_Shift;
        public InputAction @Drop => m_Wrapper.m_Inventory_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnMousePosition;
                @LMB_DoubleTap.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB_DoubleTap;
                @LMB_DoubleTap.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB_DoubleTap;
                @LMB_DoubleTap.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB_DoubleTap;
                @LMB.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB;
                @LMB.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB;
                @LMB.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLMB;
                @RMB.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRMB;
                @RMB.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRMB;
                @RMB.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRMB;
                @Shift.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShift;
                @Drop.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnDrop;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @LMB_DoubleTap.started += instance.OnLMB_DoubleTap;
                @LMB_DoubleTap.performed += instance.OnLMB_DoubleTap;
                @LMB_DoubleTap.canceled += instance.OnLMB_DoubleTap;
                @LMB.started += instance.OnLMB;
                @LMB.performed += instance.OnLMB;
                @LMB.canceled += instance.OnLMB;
                @RMB.started += instance.OnRMB;
                @RMB.performed += instance.OnRMB;
                @RMB.canceled += instance.OnRMB;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IInventoryActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnLMB_DoubleTap(InputAction.CallbackContext context);
        void OnLMB(InputAction.CallbackContext context);
        void OnRMB(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
